"""
Django settings for logg project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from datetime import timedelta
from dj_database_url import parse as db_url
from pathlib import Path
# Setting up a config for secrets
from decouple import config
import os
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# add another parent to make the root path correct
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")



ALLOWED_HOSTS = []


######################################### Application definition ###########################################

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.sites",
    # Third party Apps
    # "debug_toolbar",
    'django_filters',
    'drf_spectacular',
    'drf_spectacular_sidecar',
    'rest_framework',
    'rest_framework.authtoken',
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    # Custom Apps
    'user',
    'school',
    "social_auth",
    "payment_provider"
]
########################################### MIDDLEWARE ###########################################
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # Security middleware for whitenose
     "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    # this is need for other apps to interact with your app 
    "corsheaders.middleware.CorsMiddleware",
    #"debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
########################################### ROOT URL ###########################################

ROOT_URLCONF = 'logg.urls'

########################################### TEMPLATES ###########################################
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
########################################### WSGI CONF ###########################################
WSGI_APPLICATION = 'logg.wsgi.application'

###########################################  PASSWORD_VALIDATORS ###########################################


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]



########################################### REST FRAMEWORK CONFIGURATIONS  ###########################################

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES":[
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "core.authentication.TokenAuthentication",
        

    ],
    "DEFAULT_PERMISSION_CLASSES":[
        "rest_framework.permissions.IsAuthenticated"
    ],
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    "DEFAULT_PAGINATION_CLASS":"rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 20,
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
JWT_SECRET_KEY=config("JWT_SECRET_KEY")
########################################### SIMPLE JWT CONFIGURATIONS  ###########################################

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ["BEARER"],
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=0.5), # it should last shorter than the access token
    'REFRESH_TOKEN_LIFETIME': timedelta(days=90), # it should be longer than the access token
    'ROTATE_REFRESH_TOKENS': False, # it return both a refresh and access token
    'BLACKLIST_AFTER_ROTATION': False, # this will blacklist it after rotation, so the old refresh token will not be allowed
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': JWT_SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

########################################### SPECTACULAR CONFIGURATIONS  ###########################################
SPECTACULAR_SETTINGS = {
    'TITLE': 'Logg API',
    'DESCRIPTION': 'Provide security for society',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
    # OTHER SETTINGS
    # OTHER SETTINGS
}
########################################### LOGGING CONFIGURATIONS  ###########################################
LOGGING={
    
   "version":1,
   "disable_settings_loggers":False, # remove all other loggers
   "formatters":{ # the format you want your log in
        'main_formatter':{
            'format':"{asctime} - {levelname} - {module} - {message}",
            'style':"{"
        },
        'debug_formatter':{
            'format':"{asctime} - {message}",
            'style':"{"
        }
   },
   "handlers":{ # where do you want to keep the log
        'console':{
            'class':"logging.StreamHandler", # this will output the log it to the console
            'formatter':"main_formatter"
        },
        'dev_console':{
            'class':"logging.StreamHandler", # this will output the log it to the console
            'formatter':"debug_formatter"
        },
        'file':{
            'class':"logging.FileHandler", # this will output the log it to the console
            'formatter':"main_formatter",
            "filename":f"info.log"
        }
   },
   "loggers":{
       'main':{
           'handlers':['file', 'console'],
           'propagate': True,
           'level': "INFO"
       },
       'debug':{
           'handlers':['dev_console'],
           'propagate': True,
           'level': "DEBUG"
       }
   },
}


########################################### EMAIL CONFIGURATIONS  ###########################################

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
# EMAIL_USE_TLS = True
EMAIL_USE_SSL = True
EMAIL_PORT =  config('EMAIL_HOST_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = config('EMAIL_HOST_USER')

########################################### PAYSTACK CONFIGURATIONS  ###########################################
PAYSTACK_PUBLIC_KEY = config('PAYSTACK_PUBLIC_KEY')
PAYSTACK_PRIVATE_KEY = config('PAYSTACK_PRIVATE_KEY')

########################################### FLUTTERWAVE CONFIGURATIONS  ###########################################
FLUTTERWAVE_PUBLIC_KEY = config('FLUTTERWAVE_PUBLIC_KEY')
FLUTTERWAVE_PRIVATE_KEY = config('FLUTTERWAVE_PRIVATE_KEY')
FLUTTERWAVE_SECRET_HASH = config('FLUTTERWAVE_SECRET_HASH')

########################################### STRIPE CONFIGURATIONS  ###########################################
STRIPE_PUBLIC_KEY = config('STRIPE_PUBLIC_KEY')
STRIPE_PRIVATE_KEY = config('STRIPE_PRIVATE_KEY')

SOCIAL_SECRET = config('SOCIAL_SECRET')

########################################### DATABASE CONFIGURATIONS  ###########################################
DATABASES = {
    "default": config(
        "DATABASE_URL",
        default="sqlite:///" + os.path.join(BASE_DIR, "logg.sqlite3"),
        cast=db_url,
    )
}

# Image setup
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'


CORS_ALLOWED_ORIGINS =[
   
"http://localhost:3000",
"http://127.0.0.1:3000"
]

# this is what it will use even if one is provided on the server
# as long as it is passed
CARD_PAYMENT_SUCCESS_URL = "https://logg.pythonanywhere.com/"
FRONTEND_URL = config('FRONTEND_URL', '127.0.0.1:8000')
BACKEND_BASE_URL = config('BACKEND_BASE_URL', '127.0.0.1:8000')
FERNET_KEY = config('FERNET_KEY', 'nairaland.com')

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

SITE_ID=1

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Define the user model
AUTH_USER_MODEL = 'user.User'
BACKEND_ADMIN_EMAIL = config('BACKEND_ADMIN_EMAIL')
PERCENTAGE_CHARGE = config('PERCENTAGE_CHARGE')